import React, { useState, useEffect, useRef } from 'react';
import Message from './Message';
import TypingIndicator from './TypingIndicator';
import ServiceSelection from './ServiceSelection';
import DateSelection from './DateSelection';
import TimeSelection from './TimeSelection';
import ConfirmationMessage from './ConfirmationMessage';

const ChatInterface = () => {
  const [messages, setMessages] = useState([]);
  const [isTyping, setIsTyping] = useState(false);
  const [currentStep, setCurrentStep] = useState('welcome');
  const [selectedService, setSelectedService] = useState(null);
  const [selectedDate, setSelectedDate] = useState(null);
  const [selectedTime, setSelectedTime] = useState(null);
  const [bookingConfirmed, setBookingConfirmed] = useState(false);
  
  const messagesEndRef = useRef(null);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  useEffect(() => {
    // Initial welcome message
    setTimeout(() => {
      addBotMessage("üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ —Å–∞–ª–æ–Ω–∞ –∫—Ä–∞—Å–æ—Ç—ã '–≠–ª–µ–≥–∞–Ω—Ç'. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?");
    }, 1000);

    setTimeout(() => {
      addBotMessage("–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å—Ç—Ä–∏–∂–∫—É, –æ–∫—Ä–∞—à–∏–≤–∞–Ω–∏–µ, —É–∫–ª–∞–¥–∫—É –∏–ª–∏ –º–∞–Ω–∏–∫—é—Ä. –ö–∞–∫—É—é —É—Å–ª—É–≥—É –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –≤—ã–±—Ä–∞—Ç—å?");
      setCurrentStep('service');
    }, 3000);
  }, []);

  useEffect(() => {
    if (selectedService) {
      setIsTyping(true);
      setTimeout(() => {
        addBotMessage(`–í—ã –≤—ã–±—Ä–∞–ª–∏: ${selectedService}. –û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä!`);
        setIsTyping(false);
        
        setTimeout(() => {
          addBotMessage("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—É—é –¥–ª—è –≤–∞—Å –¥–∞—Ç—É:");
          setCurrentStep('date');
        }, 1000);
      }, 1500);
    }
  }, [selectedService]);

  useEffect(() => {
    if (selectedDate) {
      setIsTyping(true);
      setTimeout(() => {
        addBotMessage(`–í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–∞—Ç—É: ${selectedDate}`);
        setIsTyping(false);
        
        setTimeout(() => {
          addBotMessage("–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è:");
          setCurrentStep('time');
        }, 1000);
      }, 1500);
    }
  }, [selectedDate]);

  useEffect(() => {
    if (selectedTime) {
      setIsTyping(true);
      setTimeout(() => {
        addBotMessage(`–í—ã –≤—ã–±—Ä–∞–ª–∏ –≤—Ä–µ–º—è: ${selectedTime}`);
        setIsTyping(false);
        
        setTimeout(() => {
          addBotMessage(`–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤–∞—à—É –∑–∞–ø–∏—Å—å:
          \n–£—Å–ª—É–≥–∞: ${selectedService}
          \n–î–∞—Ç–∞: ${selectedDate}
          \n–í—Ä–µ–º—è: ${selectedTime}`);
          setCurrentStep('confirmation');
        }, 1000);
      }, 1500);
    }
  }, [selectedTime]);

  const addBotMessage = (text) => {
    setMessages(prev => [...prev, { text, isUser: false }]);
  };

  const addUserMessage = (text) => {
    setMessages(prev => [...prev, { text, isUser: true }]);
  };

  const handleServiceSelect = (service) => {
    setSelectedService(service);
    addUserMessage(service);
  };

  const handleDateSelect = (date) => {
    setSelectedDate(date);
    addUserMessage(date);
  };

  const handleTimeSelect = (time) => {
    setSelectedTime(time);
    addUserMessage(time);
  };

  const handleConfirmation = (confirmed) => {
    if (confirmed) {
      addUserMessage("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é –∑–∞–ø–∏—Å—å");
      setIsTyping(true);
      
      setTimeout(() => {
        addBotMessage("–û—Ç–ª–∏—á–Ω–æ! –í–∞—à–∞ –∑–∞–ø–∏—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. –ú—ã –∂–¥–µ–º –≤–∞—Å –≤ —Å–∞–ª–æ–Ω–µ '–≠–ª–µ–≥–∞–Ω—Ç'.");
        setIsTyping(false);
        setBookingConfirmed(true);
        
        setTimeout(() => {
          addBotMessage("–ó–∞ –¥–µ–Ω—å –¥–æ –≤–∏–∑–∏—Ç–∞ —è –æ—Ç–ø—Ä–∞–≤–ª—é –≤–∞–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ. –ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –≤–∞–º –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ.");
          setCurrentStep('completed');
        }, 1500);
      }, 2000);
    } else {
      addUserMessage("–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å");
      setIsTyping(true);
      
      setTimeout(() => {
        addBotMessage("–ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞. –•–æ—Ç–∏—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è –∏–ª–∏ —É—Å–ª—É–≥—É?");
        setIsTyping(false);
        setSelectedService(null);
        setSelectedDate(null);
        setSelectedTime(null);
        setCurrentStep('service');
      }, 1500);
    }
  };

  return (
    <div className="flex-1 overflow-y-auto p-4 bg-gray-50 flex flex-col">
      {messages.map((message, index) => (
        <Message key={index} text={message.text} isUser={message.isUser} />
      ))}
      
      {isTyping && <TypingIndicator />}
      
      {currentStep === 'service' && !selectedService && (
        <ServiceSelection onSelect={handleServiceSelect} />
      )}
      
      {currentStep === 'date' && selectedService && !selectedDate && (
        <DateSelection onSelect={handleDateSelect} />
      )}
      
      {currentStep === 'time' && selectedDate && !selectedTime && (
        <TimeSelection onSelect={handleTimeSelect} />
      )}
      
      {currentStep === 'confirmation' && selectedTime && !bookingConfirmed && (
        <ConfirmationMessage onConfirm={handleConfirmation} />
      )}
      
      <div ref={messagesEndRef} />
    </div>
  );
};

export default ChatInterface;
